import pygame
import heapq
import time

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 800, 600
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pathfinding Visualizer")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
GREY = (200, 200, 200)
YELLOW = (255, 255, 0)
PURPLE = (128, 0, 128)

# Button constants
BUTTON_WIDTH = 90
BUTTON_HEIGHT = 50
BUTTON_MARGIN = 10
BUTTON_FONT = pygame.font.SysFont('comicsans', 20)
START_BUTTON_COLOR = GREEN
CLEAR_BUTTON_COLOR = RED
BUTTON_TEXT_COLOR = WHITE

# Node class
class Node:
    def __init__(self, row, col, width, total_rows):
        self.row = row
        self.col = col
        self.x = row * width
        self.y = col * width
        self.color = WHITE
        self.neighbors = []
        self.width = width
        self.total_rows = total_rows

    def get_pos(self):
        return self.row, self.col

    def is_closed(self):
        return self.color == RED

    def is_open(self):
        return self.color == GREEN

    def is_barrier(self):
        return self.color == BLACK

    def is_start(self):
        return self.color == BLUE

    def is_end(self):
        return self.color == YELLOW

    def reset(self):
        self.color = WHITE

    def make_closed(self):
        self.color = RED

    def make_open(self):
        self.color = GREEN

    def make_barrier(self):
        self.color = BLACK

    def make_start(self):
        self.color = BLUE

    def make_end(self):
        self.color = YELLOW

    def make_path(self):
        self.color = PURPLE

    def draw(self, win):
        pygame.draw.rect(win, self.color, (self.x, self.y, self.width, self.width))

    def update_neighbors(self, grid):
        self.neighbors = []
        if self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_barrier(): # Down
            self.neighbors.append(grid[self.row + 1][self.col])

        if self.row > 0 and not grid[self.row - 1][self.col].is_barrier(): # Up
            self.neighbors.append(grid[self.row - 1][self.col])

        if self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_barrier(): # Right
            self.neighbors.append(grid[self.row][self.col + 1])

        if self.col > 0 and not grid[self.row][self.col - 1].is_barrier(): # Left
            self.neighbors.append(grid[self.row][self.col - 1])

    def __lt__(self, other):
        return False

def heuristic(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return abs(x1 - x2) + abs(y1 - y2)

def reconstruct_path(came_from, current, draw):
    path_length = 0
    while current in came_from and current is not None:
        current = came_from[current]
        if current is not None:
            current.make_path()
            draw()
            path_length += 1
    return path_length

def dijkstra(draw, grid, start, end):
    count = 0
    open_set = []
    heapq.heappush(open_set, (0, count, start))
    came_from = {}
    g_score = {node: float("inf") for row in grid for node in row}
    g_score[start] = 0

    nodes_explored = 0

    while open_set:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

        current = heapq.heappop(open_set)[2]
        if current == end:
            path_length = reconstruct_path(came_from, end, draw)
            end.make_end()
            return True, nodes_explored, path_length

        for neighbor in current.neighbors:
            temp_g_score = g_score[current] + 1

            if temp_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = temp_g_score
                heapq.heappush(open_set, (g_score[neighbor], count, neighbor))
                neighbor.make_open()

        draw()

        if current != start:
            current.make_closed()

        count += 1
        nodes_explored += 1

    return False, nodes_explored, 0

def a_star(draw, grid, start, end):
    count = 0
    open_set = []
    heapq.heappush(open_set, (0, count, start))
    came_from = {}
    g_score = {node: float("inf") for row in grid for node in row}
    f_score = {node: float("inf") for row in grid for node in row}
    g_score[start] = 0
    f_score[start] = heuristic(start.get_pos(), end.get_pos())

    open_set_hash = {start}

    nodes_explored = 0

    while open_set:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

        current = heapq.heappop(open_set)[2]
        open_set_hash.remove(current)

        if current == end:
            path_length = reconstruct_path(came_from, end, draw)
            end.make_end()
            return True, nodes_explored, path_length

        for neighbor in current.neighbors:
            temp_g_score = g_score[current] + 1

            if temp_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = temp_g_score
                f_score[neighbor] = temp_g_score + heuristic(neighbor.get_pos(), end.get_pos())
                if neighbor not in open_set_hash:
                    heapq.heappush(open_set, (f_score[neighbor], count, neighbor))
                    open_set_hash.add(neighbor)
                    neighbor.make_open()

        draw()

        if current != start:
            current.make_closed()

        count += 1
        nodes_explored += 1

    return False, nodes_explored, 0

def bfs(draw, grid, start, end):
    queue = [start]
    came_from = {start: None}
    nodes_explored = 0

    while queue:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

        current = queue.pop(0)
        if current == end:
            path_length = reconstruct_path(came_from, end, draw)
            end.make_end()
            return True, nodes_explored, path_length

        for neighbor in current.neighbors:
            if neighbor not in came_from:
                queue.append(neighbor)
                came_from[neighbor] = current
                neighbor.make_open()

        draw()

        if current != start:
            current.make_closed()

        nodes_explored += 1

    return False, nodes_explored, 0

def dfs(draw, grid, start, end):
    stack = [start]
    came_from = {start: None}
    nodes_explored = 0

    while stack:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

        current = stack.pop()
        if current == end:
            path_length = reconstruct_path(came_from, end, draw)
            end.make_end()
            return True, nodes_explored, path_length

        for neighbor in current.neighbors:
            if neighbor not in came_from:
                stack.append(neighbor)
                came_from[neighbor] = current
                neighbor.make_open()

        draw()

        if current != start:
            current.make_closed()

        nodes_explored += 1

    return False, nodes_explored, 0

def make_grid(rows, width):
    grid = []
    gap = width // rows
    for i in range(rows):
        grid.append([])
        for j in range(rows):
            node = Node(i, j, gap, rows)
            grid[i].append(node)
    return grid

def draw_grid(win, rows, width):
    gap = width // rows
    for i in range(rows):
        pygame.draw.line(win, GREY, (0, i * gap), (width, i * gap))
        for j in range(rows):
            pygame.draw.line(win, GREY, (j * gap, 0), (j * gap, width))

def draw(win, grid, rows, width, algorithm=None, path_length=0, nodes_explored=0, execution_time=0.0, complexity=None):
    win.fill(WHITE)

    for row in grid:
        for node in row:
            node.draw(win)

    draw_grid(win, rows, width)
    draw_buttons(win)

    if algorithm:
        display_info(win, algorithm, path_length, nodes_explored, execution_time, complexity)

    pygame.display.update()

def display_info(win, algorithm, path_length, nodes_explored, execution_time, complexity):
    info_font = pygame.font.SysFont('comicsans', 20)
    algorithm_text = info_font.render(f"Algorithm: {algorithm.upper()}", True, BLACK)
    path_length_text = info_font.render(f"Path Length: {path_length}", True, BLACK)
    nodes_explored_text = info_font.render(f"Nodes Explored: {nodes_explored}", True, BLACK)
    execution_time_text = info_font.render(f"Execution Time: {execution_time:.6f} seconds", True, BLACK)
    complexity_text = info_font.render(f"Complexity: {complexity}", True, BLACK)

    win.blit(algorithm_text, (WIDTH - 300, HEIGHT - 150))
    win.blit(path_length_text, (WIDTH - 300, HEIGHT - 130))
    win.blit(nodes_explored_text, (WIDTH - 300, HEIGHT - 110))
    win.blit(execution_time_text, (WIDTH - 300, HEIGHT - 90))
    win.blit(complexity_text, (WIDTH - 300, HEIGHT - 70))

def draw_buttons(win):
    pygame.draw.rect(win, START_BUTTON_COLOR, (WIDTH - BUTTON_WIDTH - BUTTON_MARGIN, BUTTON_MARGIN, BUTTON_WIDTH, BUTTON_HEIGHT))
    start_text = BUTTON_FONT.render("Start", True, BUTTON_TEXT_COLOR)
    win.blit(start_text, (WIDTH - BUTTON_WIDTH // 2 - start_text.get_width() // 2, BUTTON_MARGIN + BUTTON_HEIGHT // 2 - start_text.get_height() // 2))

    pygame.draw.rect(win, CLEAR_BUTTON_COLOR, (WIDTH - BUTTON_WIDTH - BUTTON_MARGIN, 2 * BUTTON_MARGIN + BUTTON_HEIGHT, BUTTON_WIDTH, BUTTON_HEIGHT))
    clear_text = BUTTON_FONT.render("Clear", True, BUTTON_TEXT_COLOR)
    win.blit(clear_text, (WIDTH - BUTTON_WIDTH // 2 - clear_text.get_width() // 2, 2 * BUTTON_MARGIN + BUTTON_HEIGHT + BUTTON_HEIGHT // 2 - clear_text.get_height() // 2))

    pygame.draw.rect(win, BLUE, (WIDTH - BUTTON_WIDTH - BUTTON_MARGIN, 3 * BUTTON_MARGIN + 2 * BUTTON_HEIGHT, BUTTON_WIDTH, BUTTON_HEIGHT))
    dijkstra_text = BUTTON_FONT.render("Dijkstra", True, BUTTON_TEXT_COLOR)
    win.blit(dijkstra_text, (WIDTH - BUTTON_WIDTH // 2 - dijkstra_text.get_width() // 2, 3 * BUTTON_MARGIN + 2 * BUTTON_HEIGHT + BUTTON_HEIGHT // 2 - dijkstra_text.get_height() // 2))

    pygame.draw.rect(win, BLUE, (WIDTH - BUTTON_WIDTH - BUTTON_MARGIN, 4 * BUTTON_MARGIN + 3 * BUTTON_HEIGHT, BUTTON_WIDTH, BUTTON_HEIGHT))
    a_star_text = BUTTON_FONT.render("A*", True, BUTTON_TEXT_COLOR)
    win.blit(a_star_text, (WIDTH - BUTTON_WIDTH // 2 - a_star_text.get_width() // 2, 4 * BUTTON_MARGIN + 3 * BUTTON_HEIGHT + BUTTON_HEIGHT // 2 - a_star_text.get_height() // 2))

    pygame.draw.rect(win, BLUE, (WIDTH - BUTTON_WIDTH - BUTTON_MARGIN, 5 * BUTTON_MARGIN + 4 * BUTTON_HEIGHT, BUTTON_WIDTH, BUTTON_HEIGHT))
    bfs_text = BUTTON_FONT.render("BFS", True, BUTTON_TEXT_COLOR)
    win.blit(bfs_text, (WIDTH - BUTTON_WIDTH // 2 - bfs_text.get_width() // 2, 5 * BUTTON_MARGIN + 4 * BUTTON_HEIGHT + BUTTON_HEIGHT // 2 - bfs_text.get_height() // 2))

    pygame.draw.rect(win, BLUE, (WIDTH - BUTTON_WIDTH - BUTTON_MARGIN, 6 * BUTTON_MARGIN + 5 * BUTTON_HEIGHT, BUTTON_WIDTH, BUTTON_HEIGHT))
    dfs_text = BUTTON_FONT.render("DFS", True, BUTTON_TEXT_COLOR)
    win.blit(dfs_text, (WIDTH - BUTTON_WIDTH // 2 - dfs_text.get_width() // 2, 6 * BUTTON_MARGIN + 5 * BUTTON_HEIGHT + BUTTON_HEIGHT // 2 - dfs_text.get_height() // 2))

    pygame.draw.rect(win, BLUE, (WIDTH - BUTTON_WIDTH - BUTTON_MARGIN, 7 * BUTTON_MARGIN + 6 * BUTTON_HEIGHT, BUTTON_WIDTH, BUTTON_HEIGHT))
    complexity_text = BUTTON_FONT.render("Complexity", True, BUTTON_TEXT_COLOR)
    win.blit(complexity_text, (WIDTH - BUTTON_WIDTH // 2 - complexity_text.get_width() // 2, 7 * BUTTON_MARGIN + 6 * BUTTON_HEIGHT + BUTTON_HEIGHT // 2 - complexity_text.get_height() // 2))

def get_clicked_pos(pos, rows, width):
    gap = width // rows
    y, x = pos

    row = y // gap
    col = x // gap

    return row, col

def main(win, width):
    ROWS = 50
    grid = make_grid(ROWS, width)

    start = None
    end = None
    algorithm = None
    path_length = 0
    nodes_explored = 0
    execution_time = 0.0
    complexity = None

    run = True
    started = False
    path_found = False

    while run:
        draw(win, grid, ROWS, width, algorithm, path_length, nodes_explored, execution_time, complexity)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False

            if started:
                continue

            if pygame.mouse.get_pressed()[0]:  # Left mouse button
                pos = pygame.mouse.get_pos()
                row, col = get_clicked_pos(pos, ROWS, width)

                if WIDTH - BUTTON_WIDTH - BUTTON_MARGIN <= pos[0] <= WIDTH - BUTTON_MARGIN:
                    if BUTTON_MARGIN <= pos[1] <= BUTTON_MARGIN + BUTTON_HEIGHT:
                        if start and end:
                            started = True
                            for row in grid:
                                for node in row:
                                    node.update_neighbors(grid)
                            if algorithm == "dijkstra":
                                start_time = time.time()
                                path_found, nodes_explored, path_length = dijkstra(lambda: draw(win, grid, ROWS, width, algorithm, path_length, nodes_explored, execution_time, complexity), grid, start, end)
                                execution_time = time.time() - start_time
                                complexity = "O((V+E)log V)"
                            elif algorithm == "a_star":
                                start_time = time.time()
                                path_found, nodes_explored, path_length = a_star(lambda: draw(win, grid, ROWS, width, algorithm, path_length, nodes_explored, execution_time, complexity), grid, start, end)
                                execution_time = time.time() - start_time
                                complexity = "O((V+E)log V)"
                            elif algorithm == "bfs":
                                start_time = time.time()
                                path_found, nodes_explored, path_length = bfs(lambda: draw(win, grid, ROWS, width, algorithm, path_length, nodes_explored, execution_time, complexity), grid, start, end)
                                execution_time = time.time() - start_time
                                complexity = "O(V+E)"
                            elif algorithm == "dfs":
                                start_time = time.time()
                                path_found, nodes_explored, path_length = dfs(lambda: draw(win, grid, ROWS, width, algorithm, path_length, nodes_explored, execution_time, complexity), grid, start, end)
                                execution_time = time.time() - start_time
                                complexity = "O(V+E)"
                            if path_found:
                                draw(win, grid, ROWS, width, algorithm, path_length, nodes_explored, execution_time, complexity)
                            started = False
                    elif 2 * BUTTON_MARGIN + BUTTON_HEIGHT <= pos[1] <= 2 * BUTTON_MARGIN + 2 * BUTTON_HEIGHT:
                        start = None
                        end = None
                        grid = make_grid(ROWS, width)
                        algorithm = None
                        path_length = 0
                        nodes_explored = 0
                        execution_time = 0.0
                        complexity = None
                    elif 3 * BUTTON_MARGIN + 2 * BUTTON_HEIGHT <= pos[1] <= 3 * BUTTON_MARGIN + 3 * BUTTON_HEIGHT:
                        algorithm = "dijkstra"
                    elif 4 * BUTTON_MARGIN + 3 * BUTTON_HEIGHT <= pos[1] <= 4 * BUTTON_MARGIN + 4 * BUTTON_HEIGHT:
                        algorithm = "a_star"
                    elif 5 * BUTTON_MARGIN + 4 * BUTTON_HEIGHT <= pos[1] <= 5 * BUTTON_MARGIN + 5 * BUTTON_HEIGHT:
                        algorithm = "bfs"
                    elif 6 * BUTTON_MARGIN + 5 * BUTTON_HEIGHT <= pos[1] <= 6 * BUTTON_MARGIN + 6 * BUTTON_HEIGHT:
                        algorithm = "dfs"
                    elif 7 * BUTTON_MARGIN + 6 * BUTTON_HEIGHT <= pos[1] <= 7 * BUTTON_MARGIN + 7 * BUTTON_HEIGHT:
                        complexity = "O((V+E)log V)"
                else:
                    node = grid[row][col]
                    if not start and node != end:
                        start = node
                        start.make_start()
                    elif not end and node != start:
                        end = node
                        end.make_end()
                    elif node != start and node != end:
                        node.make_barrier()

            elif pygame.mouse.get_pressed()[2]:  # Right mouse button
                pos = pygame.mouse.get_pos()
                row, col = get_clicked_pos(pos, ROWS, width)
                node = grid[row][col]
                node.reset()
                if node == start:
                    start = None
                elif node == end:
                    end = None

    pygame.quit()

if __name__ == "__main__":
    main(WIN, WIDTH)